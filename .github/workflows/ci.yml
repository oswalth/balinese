defaults:
  run:
    shell: "bash"

name: "CI"

on:
  push:
    branches: ["master"]
    tags: ["v*"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:
    inputs:
      stage:
        description: "Specify stage environment to deploy"
        required: false
        default: "dev"


env:
  COMMITIZEN_VERSION: "2.20.0"
  CDK_VERSION: "1.158.0"
  NODE_VERSION: "16.13.0"
  POETRY_VERSION: "1.1.13"
  PYTHON_VERSION: "3.10.1"

jobs:
  commitizen:
    name: "Check commit message"

    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v2.4.0"

      - name: "Fetch ${{ github.base_ref }}"
        if: "${{ github.event_name == 'pull_request' }}"
        run: |
          set -euo pipefail

          git fetch --depth=1 origin +refs/heads/${{ github.base_ref }}:refs/heads/${{ github.base_ref }}
          git fetch --prune --unshallow

      - name: "Install Python"
        if: "${{ !startsWith(github.ref, 'refs/tags/') }}"
        uses: "actions/setup-python@v2.3.1"
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: "Install commitizen"
        if: "${{ !startsWith(github.ref, 'refs/tags/') }}"
        run: "pip install commitizen==${{ env.COMMITIZEN_VERSION }}"

      - name: "Check pull request commit messages"
        if: "${{ github.event_name == 'pull_request' }}"
        run: |
          set -euo pipefail

          for commit in $(git log --pretty=%H ${{ github.base_ref }}..HEAD); do
            echo "Checking commit: ${commit}"
            cz check -m "$(git log -1 --pretty=%B ${commit})"
          done

      - name: "Check last commit message"
        if: "${{ github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/') }}"
        run: 'cz check -m "$(git log -1 --pretty=%B)"'

  install:
    name: "Install project"

    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v2.4.0"

      - name: "Install Python"
        uses: "actions/setup-python@v2.3.1"
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: "Install poetry"
        uses: "snok/install-poetry@v1.3.0"
        with:
          version: "${{ env.POETRY_VERSION }}"

      - name: "Cache venv"
        uses: "actions/cache@v2.1.7"
        with:
          path: ".venv"
          key: "venv-${{ hashFiles('.python-version') }}-${{ hashFiles('poetry.lock') }}"

      - name: "Install project"
        run: "poetry install"

  deploy:
    needs: [ "install" ]
    name: "Deploy infrastructure"
    if: "${{ github.event_name == 'workflow_dispatch' }}"

    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v2.4.0"

      - name: "Install Python"
        uses: "actions/setup-python@v2.3.1"
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: "Install node.js"
        uses: "actions/setup-node@v3.2.0"
        with:
          node-version: "${{ env.NODE_VERSION }}"

      - name: "Install AWS CDK cli"
        run: "npm install -g aws-cdk@${{ env.CDK_VERSION }}"

      - name: "Cached venv"
        uses: "actions/cache@v2.1.7"
        with:
          path: ".venv"
          key: "venv-${{ hashFiles('.python-version') }}-${{ hashFiles('poetry.lock') }}"

      - name: "Login to Public ECR"
        uses: "docker/login-action@v1.12.0"
        with:
          registry: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com"
          username: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          password: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: "Show stacks diff"
        run: "cdk diff -all"
        env:
          AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: "Deploy stacks"
        run: "cdk deploy -all --ci --require-approval=never"
        env:
          AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
